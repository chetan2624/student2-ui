pipeline {
    agent any

    environment {
        APP_NAME = "student2-ui"
        DOCKER_IMAGE = "chetan801/${APP_NAME}:latest"
        SONARQUBE_SERVER = 'Sonarqube'  
        DOCKER_HUB_USERNAME = 'chetan801' 
    }

    stages {
        // Stage 1: Clone Repository
        stage('Checkout Code') {
            steps {
                echo "Cloning the repository..."
                git 'https://github.com/chetan2624/student2-ui.git'
            }
        }

        // Stage 2: Scan for Secrets (GitLeaks)
        stage('Scan for Secrets - GitLeaks') {
            steps {
                echo "Running GitLeaks scan..."
                sh 'gitleaks detect --source . --report=gitleaks-report.json || true'
            }
        }

        // Stage 3: Build Application
        stage('Build with Maven') {
            steps {
                echo "Building the Java application with Maven..."
                sh 'mvn clean package'
            }
        }

        // Stage 4: SonarQube Analysis (Code Testing)
        stage('SonarQube Analysis') {
            steps {
                echo "Performing SonarQube analysis on the project"
                withSonarQubeEnv(installationName: SONARQUBE_SERVER, credentialsId: 'Sonarqube') {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=student2-ui \
                        -Dsonar.projectName="student2-ui"
                    '''
                }
            }
        }

        // Stage 5: Build Docker Image
        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh "docker build -t $DOCKER_IMAGE ."
            }
        }

        // Stage 6: Scan Docker Image (Trivy)
        stage('Scan Docker Image - Trivy') {
            steps {
                echo "Scanning Docker image using Trivy..."
                sh "trivy image $DOCKER_IMAGE || true"
            }
        }

        // Stage 7: Push Docker Image to Docker Hub
        stage('Push Docker Image to Docker Hub') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        // Stage 8: Clean Workspace and Docker
        stage('Clean Workspace & Docker') {
            steps {
                echo "Cleaning up Docker and workspace..."
                sh 'docker system prune -af || true'
                cleanWs()
            }
        }
    }
}
